#include <bits/stdc++.h>

using namespace std;

vector<int> v[1005];
bool ok[1005];

bool dfs(int u, int par) {
    ok[u] = true;
    for (auto x : v[u]) {
        if (!ok[x]) {
            if (dfs(x, u)) return true;
        } else if (x != par) {
            return true;
        }
    }
    return false;
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;

        // Reset graph
        for (int i = 1; i <= n; i++) {
            v[i].clear();
        }

        // Read edges
        for (int i = 0; i < m; i++) {
            int x, y;
            cin >> x >> y;
            v[x].push_back(y);
            v[y].push_back(x);
        }

        memset(ok, false, sizeof(ok));
        bool hasCycle = false;

        // Check for cycle in each component
        for (int i = 1; i <= n; i++) {
            if (!ok[i] && dfs(i, -1)) {
                hasCycle = true;
                break;
            }
        }

        if (hasCycle) cout << "YES" << endl;
        else cout << "NO" << endl;
    }
    return 0;
}
