#include <bits/stdc++.h>

using namespace std;

vector <int> v[10005];
bool ok[10005];
int s = -1,e = -1,parent[100005];

bool dfs(int u){
	ok[u] = true;
	for (auto x : v[u]){
		if (!ok[x]){
			parent[x] = u;
			if (dfs(x))
				return true;
		}else if (x != parent[u] && x == 1){
			s = 1;e = u;
			return true;
		}
	}
	
	return false;
}

int main(){
	int t;
	cin>>t;
	while (t--){
		s = -1;
		e = -1;
		int n,m;
		cin>>n>>m;
		memset(ok,false,sizeof(ok));
		memset(parent,-1,sizeof(parent));
		for (int i=1;i<=n;i++)
			v[i].clear();
		for (int i=1;i<=m;i++){
			int x,y;
			cin>>x>>y;
//			if (x > y)
//				swap(x,y);
			v[x].push_back(y);
			v[y].push_back(x);
		}
		for (int i=1;i<=n;i++)
			sort(v[i].begin(),v[i].end());
		vector <int> vec;
		if (dfs(1)){
			vec.push_back(s);
			while (e != s){
				vec.push_back(e);
				e = parent[e];
			}
			vec.push_back(s);
			reverse(vec.begin(),vec.end());
			for (auto x : vec)
				cout<<x<<" ";
		}else{
			cout<<"NO";
		}
		cout<<endl;
	}
	
	return 0;
}
